{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useDispatch, useStore } from \"react-redux\";\nimport transformAddress from \"../../core/models/address\";\nimport databaseService from \"../../core/services/databaseService\";\nimport { addAddress as addAddressAction, removeAddress as removeAddressAction, addAddresses as addAddressesAction } from \"../../core/reducers/addressBook\";\nimport React from 'react';\nexport default function useAddressBook() {\n  _s();\n  const dispatch = useDispatch();\n  const store = useStore();\n  const [loading, setLoading] = React.useState(true);\n  const updateDatabase = React.useCallback(() => {\n    const state = store.getState();\n    databaseService.setItem(\"addresses\", state.addressBook.addresses);\n  }, [store]);\n  return {\n    /** Add address to the redux store */\n    addAddress: address => {\n      dispatch(addAddressAction(address));\n      updateDatabase();\n    },\n    /** Remove address by ID from the redux store */\n    removeAddress: id => {\n      dispatch(removeAddressAction(id));\n      updateDatabase();\n    },\n    /** Loads saved addresses from the indexedDB */\n    loadSavedAddresses: async () => {\n      const saved = await databaseService.getItem(\"addresses\");\n      // No saved item found, exit this function\n      if (!saved || !Array.isArray(saved)) {\n        setLoading(false);\n        return;\n      }\n      dispatch(addAddressesAction(saved.map(address => transformAddress(address))));\n      setLoading(false);\n    },\n    loading\n  };\n}\n_s(useAddressBook, \"WoHuh5sLBucsRC9P98kim+TEi6o=\", false, function () {\n  return [useDispatch, useStore];\n});","map":{"version":3,"names":["useDispatch","useStore","transformAddress","databaseService","addAddress","addAddressAction","removeAddress","removeAddressAction","addAddresses","addAddressesAction","React","useAddressBook","_s","dispatch","store","loading","setLoading","useState","updateDatabase","useCallback","state","getState","setItem","addressBook","addresses","address","id","loadSavedAddresses","saved","getItem","Array","isArray","map"],"sources":["/Users/patrickpicavet/Documents/Coding/fmgroupopdracht/reactTestAddressBook/src/ui/hooks/useAddressBook.ts"],"sourcesContent":["\nimport { useDispatch, useStore } from \"react-redux\";\n\nimport transformAddress from \"../../core/models/address\";\nimport databaseService from \"../../core/services/databaseService\";\nimport { addAddress as addAddressAction, removeAddress as removeAddressAction, addAddresses as addAddressesAction } from \"../../core/reducers/addressBook\";\nimport React from 'react';\n\nexport default function useAddressBook() {\n  const dispatch = useDispatch();\n  const store = useStore();\n  const [loading, setLoading] = React.useState(true);\n\n  const updateDatabase = React.useCallback(() => {\n    const state = store.getState();\n    databaseService.setItem(\"addresses\", state.addressBook.addresses);\n  }, [store]);\n\n  return {\n    /** Add address to the redux store */\n    addAddress: (address: any) => {\n      dispatch(addAddressAction(address));\n      updateDatabase();\n    },\n    /** Remove address by ID from the redux store */\n    removeAddress: (id: any) => {\n      dispatch(removeAddressAction(id));\n      updateDatabase();\n    },\n    /** Loads saved addresses from the indexedDB */\n    loadSavedAddresses: async () => {\n      const saved = await databaseService.getItem(\"addresses\");\n      // No saved item found, exit this function\n      if (!saved || !Array.isArray(saved)) {\n        setLoading(false);\n        return;\n      }\n      dispatch(\n        addAddressesAction(saved.map((address) => transformAddress(address)))\n      );\n      setLoading(false);\n    },\n    loading,\n  };\n}\n"],"mappings":";AACA,SAASA,WAAW,EAAEC,QAAQ,QAAQ,aAAa;AAEnD,OAAOC,gBAAgB,MAAM,2BAA2B;AACxD,OAAOC,eAAe,MAAM,qCAAqC;AACjE,SAASC,UAAU,IAAIC,gBAAgB,EAAEC,aAAa,IAAIC,mBAAmB,EAAEC,YAAY,IAAIC,kBAAkB,QAAQ,iCAAiC;AAC1J,OAAOC,KAAK,MAAM,OAAO;AAEzB,eAAe,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EACvC,MAAMC,QAAQ,GAAGb,WAAW,CAAC,CAAC;EAC9B,MAAMc,KAAK,GAAGb,QAAQ,CAAC,CAAC;EACxB,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGN,KAAK,CAACO,QAAQ,CAAC,IAAI,CAAC;EAElD,MAAMC,cAAc,GAAGR,KAAK,CAACS,WAAW,CAAC,MAAM;IAC7C,MAAMC,KAAK,GAAGN,KAAK,CAACO,QAAQ,CAAC,CAAC;IAC9BlB,eAAe,CAACmB,OAAO,CAAC,WAAW,EAAEF,KAAK,CAACG,WAAW,CAACC,SAAS,CAAC;EACnE,CAAC,EAAE,CAACV,KAAK,CAAC,CAAC;EAEX,OAAO;IACL;IACAV,UAAU,EAAGqB,OAAY,IAAK;MAC5BZ,QAAQ,CAACR,gBAAgB,CAACoB,OAAO,CAAC,CAAC;MACnCP,cAAc,CAAC,CAAC;IAClB,CAAC;IACD;IACAZ,aAAa,EAAGoB,EAAO,IAAK;MAC1Bb,QAAQ,CAACN,mBAAmB,CAACmB,EAAE,CAAC,CAAC;MACjCR,cAAc,CAAC,CAAC;IAClB,CAAC;IACD;IACAS,kBAAkB,EAAE,MAAAA,CAAA,KAAY;MAC9B,MAAMC,KAAK,GAAG,MAAMzB,eAAe,CAAC0B,OAAO,CAAC,WAAW,CAAC;MACxD;MACA,IAAI,CAACD,KAAK,IAAI,CAACE,KAAK,CAACC,OAAO,CAACH,KAAK,CAAC,EAAE;QACnCZ,UAAU,CAAC,KAAK,CAAC;QACjB;MACF;MACAH,QAAQ,CACNJ,kBAAkB,CAACmB,KAAK,CAACI,GAAG,CAAEP,OAAO,IAAKvB,gBAAgB,CAACuB,OAAO,CAAC,CAAC,CACtE,CAAC;MACDT,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC;IACDD;EACF,CAAC;AACH;AAACH,EAAA,CApCuBD,cAAc;EAAA,QACnBX,WAAW,EACdC,QAAQ;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}